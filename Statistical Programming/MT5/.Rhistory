system.time(
perform_ridge_regression(
data = loblolly,
k = 10,
lambda2 = 60,
nCores = nCores
)
)["elapsed"]
}
one_time <- time_how_long_for_nCores(1)
eigth_time <- time_how_long_for_nCores(8)
eigth_time
one_time
warnings()
t_overhead <- eight_time - one_time / 2
t_overhead
eigth_time
t_overhead <- eigth_time - one_time / 2
t_overhead
one_time <- time_how_long_for_nCores(1)
eigth_time <- time_how_long_for_nCores(8)
folds <- suppressWarnings(split(sample(n), seq_len(k)))
k = 10
folds <- suppressWarnings(split(sample(n), seq_len(k)))
folds
seq_len(k)
split(sample(n), seq_len(k))
fold
dtrain <- data[-fold, ]
folds
folds[1]
fold = folds[1]
fold
dtrain <- data[-fold, ]
data[-fold, ]
dtrain <- data[-fold, ]
data
data[-fold,]
n
n <- nrow(data)
n
n <- nrow(data)
loblolly <- read.table(
"prepd-loblolly.txt.gz",
header = TRUE,
colClasses = "numeric"
)
data = loblolly
dtrain <- data[-fold, ]
data
fold
data
n <- nrow(data)
folds <- suppressWarnings(split(sample(n), seq_len(k)))
folds
fold = folds[1]
fold
dtrain <- data[-fold, ]
fold
model_ = penalized(T ~ ., data=dt[grp !=fold,-c("grp")],lambda2=l2,trace=F)
data
data[-fold, ]
dtrain <- data[-fold, ]
data$fold
library(penalized)
library(data.table)
library(parallel)
detectCores()
#palette using grey
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# 1.1
setwd("C:/Users/kaany/OneDrive/Desktop/Practicals/MT5") # setting directory to read data from it
dt= fread("prepd-loblolly.txt.gz", header=T)
all(unlist(lapply(dt, is.numeric)))
ridge = penalized(T ~ ., data=dt,lambda2=60)
plot_fitted <- function(fitted,y) {
plot(fitted, y,xlab="Fitted Values", ylab="Observed Values", col= cbbPalette[3])
abline(0,1)
text(x=-5,y=12, paste0("R^2: ", round(cor(fitted, y)^2,digits= 3)), cex = 0.75)
}
plot_res <- function(res) {
plot(res, xlab= "Indices", ylab="Residuals", col=cbbPalette[7])
abline(0,0)
}
# 1.5
one_fold_cv <- function(dt, fold, l2) {
model_ = penalized(T ~ ., data=dt[grp !=fold,-c("grp")],lambda2=l2,trace=F)
preds = predict(model_, dt[grp==fold,-c("T", "grp")])[,"mu"]
return(list(dt[grp==fold,T], preds))
}
cv <- function(dt,nfold=10, l2=60) {
n <- 1:nfold; nn <- nrow(data)
g <- factor(sample(1:nfold, nn, replace=T))
dt[,grp := g]
lapply(1:10,function(x) {
one_fold_cv(dt,x, l2)
})
}
res <- cv(dt)
cv <- function(dt,nfold=10, l2=60) {
n <- 1:nfold; nn <- nrow(dt)
g <- factor(sample(1:nfold, nn, replace=T))
dt[,grp := g]
lapply(1:10,function(x) {
one_fold_cv(dt,x, l2)
})
}
res <- cv(dt)
res
par_cv <- function(dt, cores=8,nfold=10, l2=60) {
n <- 1:nfold; nn <- nrow(dt)
g <- factor(sample(1:nfold, nn, replace=T))
dt[,grp := g]
cl <- makeCluster(cores)
clusterExport(cl, "one_fold_cv")
clusterEvalQ(cl, library("penalized"))
parLapply(cl=cl, 1:10,function(i) {
one_fold_cv(dt,i, l2)
})
stopCluster(cl)
}
par_cv(dt)
stopCluster(cl)
parLapply(cl=cl, 1:10,function(i) {
one_fold_cv(dt,i, l2)
})
cl <- makeCluster(cores)
clusterExport(cl, "one_fold_cv")
clusterEvalQ(cl, library(penalized))
cl <- makeCluster(cores)
cores =8
cl <- makeCluster(cores)
clusterExport(cl, "one_fold_cv")
clusterEvalQ(cl, library(penalized))
dt$grp
stopCluster(cl)
cl <- makeCluster(cores)
clusterExport(cl, "one_fold_cv")
clusterEvalQ(cl, library(penalized))
parLapply(cl=cl, 1:10, one_fold_cv, dt=dt,l2=60)
lapply(1:10,one_fold_cv,dt=dt,l2=60)
cl <- makeCluster(cores)
clusterExport(cl=cl, "one_fold_cv")
clusterEvalQ(cl=cl, library("penalized"))
parLapply(cl=cl, 1:10, one_fold_cv, dt=dt,l2=60)
dt[grp !=fold,-c("grp")]
fold =1
dt[grp !=fold,-c("grp")]
stopCluster(cl)
cl <- makeCluster(cores)
clusterExport(cl=cl, "one_fold_cv")
clusterEvalQ(cl=cl, library("penalized"))
clusterApply(cl=cl, 1:10, one_fold_cv, dt=dt,l2=60)
?clusterApply
clusterCall(cl=cl, 1:10, one_fold_cv, dt=dt,l2=60)
parLapply(cl=cl, 1:10, one_fold_cv, dt=dt,l2=60)
parSapply(cl=cl, 1:10, one_fold_cv, dt=dt,l2=60)
parRapply(cl=cl, 1:10, one_fold_cv, dt=dt,l2=60)
par_cv <- function(dt, cores=8,nfold=10, l2=60) {
n <- 1:nfold; nn <- nrow(dt)
g <- factor(sample(1:nfold, nn, replace=T))
dt[,grp := g]
cl <- makeCluster(cores)
clusterExport(cl=cl, "one_fold_cv")
clusterEvalQ(cl=cl, library("penalized"))
parLapply(cl=cl, 1:10, one_fold_cv, dt=dt,l2=60)
stopCluster(cl)
}
par_cv(dt)
# 1.5
one_fold_cv <- function(dt, fold, l2) {
train = dt[grp !=fold,]
train[,grp :=NULL]
test = dt[grp ==fold,]
test[,grp := NULL]
model_ = penalized(T ~ ., data= train,lambda2=l2,trace=F)
preds = predict(model_, dt[grp==fold,-c("T", "grp")])[,"mu"]
return(list(dt[grp==fold,T], preds))
}
cv <- function(dt,nfold=10, l2=60) {
n <- 1:nfold; nn <- nrow(dt)
g <- factor(sample(1:nfold, nn, replace=T))
dt[,grp := g]
lapply(1:10,function(x) {
one_fold_cv(dt,x, l2)
})
}
res <- cv(dt)
warnings()
# 1.5
one_fold_cv <- function(dt, fold, l2) {
train = dt[grp !=fold,]
train[,grp :=NULL]
test = dt[grp ==fold,]
test[,grp := NULL]
test[,T := NULL]
model_ = penalized(T ~ ., data= train,lambda2=l2,trace=F)
preds = predict(model_, test)[,"mu"]
return(list(dt[grp==fold,T], preds))
}
par_cv <- function(dt, cores=8,nfold=10, l2=60) {
n <- 1:nfold; nn <- nrow(dt)
g <- factor(sample(1:nfold, nn, replace=T))
dt[,grp := g]
cl <- makeCluster(cores)
clusterExport(cl=cl, "one_fold_cv")
clusterEvalQ(cl=cl, library("penalized"))
parLapply(cl=cl, 1:10, one_fold_cv, dt=dt,l2=60)
stopCluster(cl)
}
par_cv(dt)
fold
train = dt[grp !=fold,]
train[,grp :=NULL]
train
nrow(train)
test = dt[grp ==fold,]
test[,grp := NULL]
test[,T := NULL]
nrow(test)
model_ = penalized(T ~ ., data= train,lambda2=l2,trace=F)
l2 = 60
model_ = penalized(T ~ ., data= train,lambda2=l2,trace=F)
preds = predict(model_, test)[,"mu"]
# 1.5
one_fold_cv <- function(dt, fold, l2) {
train = dt[grp !=fold,]
train[,grp :=NULL]
test = dt[grp ==fold,]
test[,grp := NULL]
test_y = test$T
test[,T := NULL]
model_ = penalized(T ~ ., data= train,lambda2=l2,trace=F)
preds = predict(model_, test)[,"mu"]
return(list(test_y, preds))
}
par_cv <- function(dt, cores=8,nfold=10, l2=60) {
n <- 1:nfold; nn <- nrow(dt)
g <- factor(sample(1:nfold, nn, replace=T))
dt[,grp := g]
cl <- makeCluster(cores)
clusterExport(cl=cl, "one_fold_cv")
clusterEvalQ(cl=cl, library("penalized"))
parLapply(cl=cl, 1:10, one_fold_cv, dt=dt,l2=60)
stopCluster(cl)
}
par_cv(dt)
train = dt[grp !=fold,]
train[,grp :=NULL]
test = dt[grp ==fold,]
test[,grp := NULL]
test_y = test$T
test[,T := NULL]
train
nrow(train)
model_ = penalized(T ~ ., data= train,lambda2=l2,trace=F)
preds = predict(model_, test)[,"mu"]
list(test_y, preds)
par_cv <- function(dt, cores=8,nfold=10, l2=60) {
n <- 1:nfold; nn <- nrow(dt)
g <- factor(sample(1:nfold, nn, replace=T))
dt[,grp := g]
cl <- makeCluster(cores)
clusterExport(cl=cl, "one_fold_cv")
clusterExport(cl=cl, "dt")
clusterEvalQ(cl=cl, library("penalized"))
parLapply(cl=cl, 1:10, one_fold_cv, dt=dt,l2=60)
stopCluster(cl)
}
par_cv(dt)
dt
dt
n <- 1:nfold; nn <- nrow(dt)
g <- factor(sample(1:nfold, nn, replace=T))
dt[,grp := g]
nfold=10
n <- 1:nfold; nn <- nrow(dt)
g <- factor(sample(1:nfold, nn, replace=T))
dt[,grp := g]
cl <- makeCluster(cores)
clusterExport(cl=cl, "one_fold_cv")
clusterExport(cl=cl, "dt")
clusterEvalQ(cl=cl, library("penalized"))
parLapply(cl=cl, 1:10, one_fold_cv, dt=dt,l2=60)
parLapply(cl=cl, 1:10, one_fold_cv, dt=dt,l2=60)
train
nrow(train)
model_ = penalized(T ~ ., data= train,lambda2=l2,trace=F)
preds = predict(model_, test)[,"mu"]
preds
par_cv <- function(dt, cores=8,nfold=10, l2=60) {
n <- 1:nfold; nn <- nrow(dt)
g <- factor(sample(1:nfold, nn, replace=T))
dt[,grp := g]
cl <- makeCluster(cores)
clusterExport(cl=cl, "one_fold_cv")
clusterExport(cl=cl, "dt")
clusterEvalQ(cl=cl, library("penalized"))
clusterEvalQ(cl=cl, library("data.table"))
parLapply(cl=cl, 1:10, one_fold_cv, dt=dt,l2=60)
stopCluster(cl)
}
par_cv(dt)
par_cv <- function(dt, cores=8,nfold=10, l2=60) {
n <- 1:nfold; nn <- nrow(dt)
g <- factor(sample(1:nfold, nn, replace=T))
dt[,grp := g]
cl <- makeCluster(cores)
clusterExport(cl=cl, "one_fold_cv")
clusterExport(cl=cl, "dt")
clusterEvalQ(cl=cl, library("penalized"))
clusterEvalQ(cl=cl, library("data.table"))
res = parLapply(cl=cl, 1:10, one_fold_cv, dt=dt,l2=60)
stopCluster(cl)
return(res)
}
par_cv <- function(dt, cores=8,nfold=10, l2=60) {
n <- 1:nfold; nn <- nrow(dt)
g <- factor(sample(1:nfold, nn, replace=T))
dt[,grp := g]
cl <- makeCluster(cores)
clusterExport(cl=cl, "one_fold_cv")
clusterExport(cl=cl, "dt")
clusterEvalQ(cl=cl, library("penalized"))
clusterEvalQ(cl=cl, library("data.table"))
res = parLapply(cl=cl, 1:10, one_fold_cv, dt=dt,l2=60)
stopCluster(cl)
return(res)
}
res = par_cv(dt)
res
length(Res)
length(res)
?timeit
system.time
system.time(\)
system.time(c(1))
# 1.8
time_4 = system.time(par_cv(dt, cores=4))
time_8 = system.time(par_cv(dt, cores=8))
time_4
ttime_4
time_8
# 1.8
time_1 = system.time(par_cv(dt, cores=1))
time_2 = system.time(par_cv(dt, cores=2))
time_1
time_2
1:8
1:8:2
1:2:8
sequence(8)
sequence(8,2)
sequence(1,8)
?sequence
sequence(8)
sequence(8,by=2)
sequence(1,3)
sequence(3)
1:3
2**1:3
2**(1:3)
0:3
# 1.8
lapply(2**(0:3),par_cv, dt=dt)
# 1.8
lapply(2**(0:3),system.time(par_cv), dt=dt)
?randomForest
library(randomForest)
?randomForest
par_cv <- function(dt, cores=8,nfold=10, l2=60) {
n <- 1:nfold; nn <- nrow(dt)
g <- factor(sample(1:nfold, nn, replace=T))
dt[,grp := g]
cl <- makeCluster(cores)
clusterExport(cl=cl, "one_fold_cv")
clusterEvalQ(cl=cl, library("penalized"))
clusterEvalQ(cl=cl, library("data.table"))
parapply(cl=cl, 1:10, one_fold_cv, dt=dt,l2=60)
stopCluster(cl)
}
par_cv(dt)
par_cv <- function(dt, cores=8,nfold=10, l2=60) {
n <- 1:nfold; nn <- nrow(dt)
g <- factor(sample(1:nfold, nn, replace=T))
dt[,grp := g]
cl <- makeCluster(cores)
clusterExport(cl=cl, "one_fold_cv")
clusterEvalQ(cl=cl, library("penalized"))
clusterEvalQ(cl=cl, library("data.table"))
parLapply(cl=cl, 1:10, one_fold_cv, dt=dt,l2=60)
stopCluster(cl)
}
par_cv(dt)
par_cv <- function(dt, cores=8,nfold=10, l2=60) {
n <- 1:nfold; nn <- nrow(dt)
g <- factor(sample(1:nfold, nn, replace=T))
dt[,grp := g]
cl <- makeCluster(cores)
clusterExport(cl=cl, "one_fold_cv")
clusterEvalQ(cl=cl, library("penalized"))
clusterEvalQ(cl=cl, library("data.table"))
res=parLapply(cl=cl, 1:10, one_fold_cv, dt=dt,l2=60)
stopCluster(cl)
return(res)
}
?predict.randomForest
?randomForest
par_cv <- function(dt, model="ridge",cores=8,nfold=10, l2=60,ntree=20) {
n <- 1:nfold; nn <- nrow(dt)
g <- factor(sample(1:nfold, nn, replace=T))
dt[,grp := g]
cl <- makeCluster(cores)
clusterExport(cl=cl, "one_fold_cv")
clusterEvalQ(cl=cl, library("penalized"))
clusterEvalQ(cl=cl, library("data.table"))
res=parLapply(cl=cl, 1:10, one_fold_cv, dt=dt,l2, ntree,model="ridge")
stopCluster(cl)
return(res)
}
par_cv <- function(dt, model="ridge",cores=8,nfold=10, l2=60,ntree=20) {
n <- 1:nfold; nn <- nrow(dt)
g <- factor(sample(1:nfold, nn, replace=T))
dt[,grp := g]
cl <- makeCluster(cores)
clusterExport(cl=cl, "one_fold_cv")
clusterEvalQ(cl=cl, library("penalized"))
clusterEvalQ(cl=cl, library("data.table"))
res=parLapply(cl=cl, 1:10, one_fold_cv, dt=dt,l2, ntree,model="ridge")
stopCluster(cl)
return(res)
}
par_cv(dt)
one_fold_cv <- function(model,dt, fold, l2,ntree) {
if (model =="ridge") {
model_ = penalized(T ~ ., data=dt[grp !=fold,-c("grp")],lambda2=l2,trace=F)
}
else if (model =="randomForest") {
model_ = randomForest(T ~ ., data=dt[grp !=fold,-c("grp")], ntree = ntree)
}
preds = predict(model_, dt[grp==fold,-c("T", "grp")])[,"mu"]
return(list(dt[grp==fold,T], preds))
}
par_cv <- function(dt, model="ridge",cores=8,nfold=10, l2=60,ntree=20) {
n <- 1:nfold; nn <- nrow(dt)
g <- factor(sample(1:nfold, nn, replace=T))
dt[,grp := g]
cl <- makeCluster(cores)
clusterExport(cl=cl, "one_fold_cv")
clusterEvalQ(cl=cl, library("penalized"))
clusterEvalQ(cl=cl, library("data.table"))
res=parLapply(cl=cl, 1:10, one_fold_cv, dt=dt,l2, ntree,model="ridge")
stopCluster(cl)
return(res)
}
par_cv(dt)
par_cv(d, model = "randomForestt)
asd
aweq
par_cv(d, model = "randomForest")
par_cv(d, model = "randomForest")
library(randomForest)
par_cv <- function(dt, model="ridge",cores=8,nfold=10, l2=60,ntree=20) {
n <- 1:nfold; nn <- nrow(dt)
g <- factor(sample(1:nfold, nn, replace=T))
dt[,grp := g]
cl <- makeCluster(cores)
clusterExport(cl=cl, "one_fold_cv")
clusterEvalQ(cl=cl, library("penalized"))
clusterEvalQ(cl=cl, library("randomForest"))
clusterEvalQ(cl=cl, library("data.table"))
res=parLapply(cl=cl, 1:10, one_fold_cv, dt=dt,l2, ntree,model="ridge")
stopCluster(cl)
return(res)
}
par_cv(d, model = "randomForest")
n <- 1:nfold; nn <- nrow(dt)
g <- factor(sample(1:nfold, nn, replace=T))
dt[,grp := g]
par_cv(dt, model = "randomForest")
# 1.10
ridge = par_cv(dt)
randomforest = par_cv(dt, model = "randomForest")
ridge
obs = unlist(lapply(ridge, `[[`, 1))
fitt= unlist(lapply(ridge, `[[`, 2))
plot_fitted(fitt,obs)
plot_res(obs-fitt)
par(mfrow=c(2,1))
plot_fitted(fitt,obs)
plot_res(obs-fitt)
par(mfrow=c(1,2))
plot_fitted(fitt,obs)
plot_res(obs-fitt)
obs = unlist(lapply(randomforest, `[[`, 1))
fitt= unlist(lapply(randomforest, `[[`, 2))
plot_fitted(fitt,obs)
plot_res(obs-fitt)
# 1.10
ridge = par_cv(dt)
randomforest = par_cv(dt, model = "randomForest")
obs = unlist(lapply(ridge, `[[`, 1))
fitt= unlist(lapply(ridge, `[[`, 2))
obs = unlist(lapply(ridge, `[[`, 1))
fitt= unlist(lapply(ridge, `[[`, 2))
par(mfrow=c(1,2))
plot_fitted(fitt,obs)
plot_res(obs-fitt)
obs = unlist(lapply(randomforest, `[[`, 1))
fitt= unlist(lapply(randomforest, `[[`, 2))
plot_fitted(fitt,obs)
plot_res(obs-fitt)
