?lm
swim <- read.csv("C:/Users/kaany/OneDrive/Desktop/Practicals/MT4/swim.csv", stringsAsFactors=T)
swim
# 1.1
str(swim)
head(swim)
tail(swim)
pairs(swim, lower.panel = NULL)
summary(swim)
# 1.2
lm1 <- lm(time ~ . - event, data = swim)
lm1
# 1.2
lm1 <- lm(time ~ ., data = swim)
lm1
# 1.2
lm1 <- lm(time ~ . - event, data = swim)
lm1
# 1.2
lm1 <- lm(time ~ . - event, data = swim)
lm1
# 1.2
lm1 <- lm(time ~ . - c(stroke, dist), data = swim)
# 1.2
lm1 <- lm(time ~ . - stroke dist), data = swim)
# 1.2
lm1 <- lm(time ~ . - stroke, data = swim)
# 1.2
lm1 <- lm(time ~ . - stroke, dist data = swim)
# 1.2
lm1 <- lm(time ~ . - stroke dist data = swim)
# 1.2
lm1 <- lm(time ~ . - stroke - dist data = swim)
# 1.2
lm1 <- lm(time ~ . - stroke - dist, data = swim)
lm1
plot(resid(lm1) ~ fitted(lm1), data = ohp3, col = colour, pch = symbol,
xlab = "Fitted values", ylab = "Residuals")
plot(resid(lm1) ~ fitted(lm1), data = swim, col = colour, pch = symbol,
xlab = "Fitted values", ylab = "Residuals")
plot(resid(lm1) ~ fitted(lm1), data = swim,
xlab = "Fitted values", ylab = "Residuals")
plot(rstudent(lmod) ~ fitted(lmod), xlab = "Fitted values", ylab = "(Studentised) residuals")
plot(rstudent(lm1) ~ fitted(lm1), xlab = "Fitted values", ylab = "(Studentised) residuals")
rstudent(lm1)
length(rstudent[rstudent(lm1) > 2])
lm1[rstudent(lm1) > 2]
lm1$rstudent[rstudent(lm1) > 2]
rstudent(lm1) > 2
rstudent(lm1)[rstudent(lm1) > 2]
length(rstudent)
length(rstudent(lm1))
rstudent(lm1)[abs(rstudent(lm1)) > 2]
par(mfrow = c(1, 2))
plot(rstudent(lm1) ~ fitted(lm1), main = "(Studentised) residuals vs Fitted Values",
xlab = "Fitted values", ylab = "(Studentised) residuals")
qqnorm(resid(lm1), main = "Q-Q plot of (Studentised) residuals")
qqline(resid(lm1))
qqline(resid(lm1))
qqnorm(resid(lm1), main = "Q-Q plot of (Studentised) residuals")
plot(rstudent(lm1) ~ fitted(lm1), main = "(Studentised) residuals vs Fitted Values",
xlab = "Fitted values", ylab = "(Studentised) residuals")
(n <- dim(sw)[1])
(p <- dim(sw)[2])
(n <- dim(swim)[1])
(p <- dim(swim)[2])
(i <- cooks.distance(lm1) > (8/(n - 2*p)))
pairs(sw, lower.panel = NULL, pch = 1 + 15*i, col = 1 + i)
pairs(swim, lower.panel = NULL, pch = 1 + 15*i, col = 1 + i)
?pairs
i
pairs(swim, lower.panel = NULL, pch = 1 + 15*i, col = 1 + i)
sw <- swiss
sw
length()
length(sw)
nrow(sw)
i
cooks.distance(lm1) > (8/(n - 2*p))
cooks.distance(lm1)
8/(n - 2*p
asd
8/(n - 2*p)
head(swiss)
sw <- swiss
sw[, -1] <- log((swiss[, -1] + 1) / (101 - swiss[, -1]))
(n <- dim(sw)[1])
(p <- dim(sw)[2])
pairs(sw, lower.panel = NULL)
# (i) fit and check for outliers
sw1.lm <- lm(Fertility ~ Infant.Mortality + Examination + Education + Catholic + Agriculture, data = sw)
summary(sw1.lm)
(i <- cooks.distance(sw1.lm) > (8/(n - 2*p)))
pairs(sw, lower.panel = NULL, pch = 1 + 15*i, col = 1 + i)
i
pch = 1 + 15*i
pch
(i <- cooks.distance(lm1) > (8/(n - 2*p)))
i
pch = 1 + 15*i
pch
col = 1 + i
col
(i <- cooks.distance(sw1.lm) > (8/(n - 2*p)))
col = 1 + i
cokl
col]
col
?pairs
i
(i <- cooks.distance(lm1) > (8/(n - 2*p)))
pairs(sw, lower.panel = NULL, pch = 1 + 15*i, col = 1 + i)
(n <- dim(swim)[1])
(p <- dim(swim)[2])
(i <- cooks.distance(lm1) > (8/(n - 2*p)))
any(i)
pairs(sw, lower.panel = NULL, pch = 1 + 15*i, col = 1 + i)
pairs(swim, lower.panel = NULL, pch = 1 + 15*i, col = 1 + i)
par(mfrow = c(2, 2))
qqnorm(rstudent(lm1), main = NULL, pch = 1 + 15*i, col = 1 + i)
qqline(rstudent(lm1))
plot(fitted.values(lm1), rstudent(lm1), pch = 1 + 15*i, col = 1 + i)
text(fitted.values(lm1), rstudent(lm1), abbreviate(row.names(sw)), adj = -0.2)
text(fitted.values(lm1), rstudent(lm1), abbreviate(row.names(sw)), adj = -0.2)
hatvalues(lm1)
?hatvalues
qqline(rstudent(lm1))
plot(fitted.values(lm1), rstudent(lm1), pch = 1 + 15*i, col = 1 + i)
text(fitted.values(lm1), rstudent(lm1), abbreviate(row.names(sw)), adj = -0.2)
plot(hatvalues(lm1), ylim = c(0, 0.6), pch = 1 + 15*i, col = 1 + i)
text(hatvalues(lm1), row.names(sw), srt = 90, adj = -0.1)
abline(2*p/n, 0, lty = 2)
par(mfrow = c(2, 2))
qqnorm(rstudent(lm1), main = NULL, pch = 1 + 15*i, col = 1 + i)
qqline(rstudent(lm1))
plot(fitted.values(lm1), rstudent(lm1), pch = 1 + 15*i, col = 1 + i)
plot(hatvalues(lm1), ylim = c(0, 0.6), pch = 1 + 15*i, col = 1 + i)
# text(hatvalues(lm1), row.names(sw), srt = 90, adj = -0.1)
abline(2*p/n, 0, lty = 2)
qqnorm(rstudent(lm1), main = NULL, pch = 1 + 15*i, col = 1 + i)
qqline(rstudent(lm1))
plot(fitted.values(lm1), rstudent(lm1), pch = 1 + 15*i, col = 1 + i)
plot(hatvalues(lm1), ylim = c(0, 0.6), pch = 1 + 15*i, col = 1 + i)
# text(hatvalues(lm1), row.names(sw), srt = 90, adj = -0.1)
abline(2*p/n, 0, lty = 2)
par(mfrow = c(2, 2))
qqnorm(rstudent(lm1), main = NULL, pch = 1 + 15*i, col = 1 + i)
qqline(rstudent(lm1))
plot(fitted.values(lm1), rstudent(lm1), pch = 1 + 15*i, col = 1 + i)
plot(hatvalues(lm1), ylim = c(0, 0.6), pch = 1 + 15*i, col = 1 + i)
# text(hatvalues(lm1), row.names(sw), srt = 90, adj = -0.1)
abline(2*p/n, 0, lty = 2)
cooks.distance(lm1)
max(cooks.distance(lm1))
max(cooks.distance(lm1)) * 5/3
min(cooks.distance(lm1))
plot(cooks.distance(lm1), ylim = c(min(cooks.distance(lm1)) * 1/2, max(cooks.distance(lm1)) * 5/3), pch = 1 + 15*i, col = 1 + i)
text(cooks.distance(lm1), row.names(swim), srt = 90, adj = 1.1)
plot(cooks.distance(lm1), ylim = c(min(cooks.distance(lm1)) * 1/2, max(cooks.distance(lm1)) * 5/3), pch = 1 + 15*i, col = 1 + i)
hatvalues(lm1)
min(hatvalues(lm1))
plot(hatvalues(lm1), ylim = c(min(hatvalues(lm1))*1/2, max(hatvalues(lm1))*5/3, max(hatvalues(lm1))*5/3), pch = 1 + 15*i, col = 1 + i)
min(hatvalues(lm1))*1/2
max(hatvalues(lm1))*5/3
plot(hatvalues(lm1), ylim = c(min(hatvalues(lm1))*1/2, max(hatvalues(lm1))*5/3), pch = 1 + 15*i, col = 1 + i)
# 1.2
lm1 <- lm(log(time) ~ (log(dist) + stroke + sex + course)^2, data = swim)
library(data.table)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(leaps)
library(MuMIn)
library(MASS)
library(grid)
options(na.action = "na.fail")
swim <- read.csv("C:/Users/kaany/OneDrive/Desktop/Practicals/MT4/swim.csv", stringsAsFactors=T)
swim = as.data.table(swim)
swim[,dist:= as.factor(dist)]
# 1.2
lm1 <- lm(log(time) ~ (log(dist) + stroke + sex + course)^2, data = swim)
swim[,dist:= as.integer(dist)]
# 1.2
lm1 <- lm(log(time) ~ (log(dist) + stroke + sex + course)^2, data = swim)
lm1
best_lm = get.models(b, 1)[[1]]
library(MuMIn)
b = dredge(lm1)
best_lm = get.models(b, 1)[[1]]
best_lm
b = dredge(lm1)
best_lm = get.models(b, 1)[[1]]
best_lm
library(MuMIn)
b = dredge(lm1)
best_lm = get.models(b, 1)[[1]]
best_lm
library(MuMIn)
b = dredge(lm1)
best_lm = get.models(b, 1)[[1]]
best_lm
par(mfrow=c(1,1))
pdf("Box Cox for the best model.pdf")
qqnorm(rstudent(best_lm), main = "Q-Q plot of \n studentised residuals")
qqline(rstudent(best_lm))
best_lm
qqnorm(rstudent(best_lm), main = "Q-Q plot of \n studentised residuals")
qqline(rstudent(best_lm))
par(mfrow = c(1,2))
plot(rstudent(best_lm) ~ fitted(best_lm), main = "Studentised residuals \n vs. \n Fitted Values",
xlab = "Fitted values", ylab = "(Studentised) residuals")
1 + 1
par(mfrow = c(1,2))
plot(rstudent(best_lm) ~ fitted(best_lm), main = "Studentised residuals \n vs. \n Fitted Values",
xlab = "Fitted values", ylab = "(Studentised) residuals")
qqnorm(rstudent(best_lm), main = "Q-Q plot of \n studentised residuals")
qqline(rstudent(best_lm))
best_lm = get.models(b, 1)[[1]]
par(mfrow=c(1,2))
plot(resid(best_lm) ~ fitted(best_lm), data = swim,
xlab = "Fitted values", ylab = "Residuals")
plot(rstudent(best_lm) ~ fitted(best_lm), xlab = "Fitted values",
ylab = "(Studentised) residuals")
